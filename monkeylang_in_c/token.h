
#ifndef _WS_TOKEN_H_
#define _WS_TOKEN_H_

#define FOREACH_TOKEN(TOKEN_NAME) \
	TOKEN_NAME(INVALID) \
	TOKEN_NAME(EOF) \
	TOKEN_NAME(IDENTIFIER) \
	TOKEN_NAME(PERIOD) \
	TOKEN_NAME(RPAREN) \
	TOKEN_NAME(LPAREN) \
	TOKEN_NAME(RBRACE) \
	TOKEN_NAME(LBRACE) \
	TOKEN_NAME(RBRACKET) \
	TOKEN_NAME(LBRACKET) \
	TOKEN_NAME(SEMICOLON) \
	TOKEN_NAME(COMMA) \
	TOKEN_NAME(NUMBER) \
	TOKEN_NAME(PLUS) \
	TOKEN_NAME(MINUS) \
	TOKEN_NAME(STAR) \
	TOKEN_NAME(SLASH) \
	TOKEN_NAME(BANG) \
	TOKEN_NAME(LT) \
	TOKEN_NAME(GT) \
	TOKEN_NAME(ASSIGN) \
	TOKEN_NAME(EQUALS) \
	TOKEN_NAME(NOT_EQUALS) \
	TOKEN_NAME(STRING) \
	TOKEN_NAME(FUNCTION) \
	TOKEN_NAME(LET) \
	TOKEN_NAME(TRUE) \
	TOKEN_NAME(FALSE) \
	TOKEN_NAME(IF) \
	TOKEN_NAME(ELSE) \
	TOKEN_NAME(RETURN) \

#define GENERATE_ENUM(ENUM) TOKEN_ ## ENUM,
#define GENERATE_STRING(STRING) #STRING,

enum TOKEN_ENUM {
	FOREACH_TOKEN(GENERATE_ENUM)
};

typedef struct t_Token {
	char	*Text;
	int 	TextLength;
	int		TokenType;
} Token, *PToken;

void token_print(PToken ptoken);



#endif

